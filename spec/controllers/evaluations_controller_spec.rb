# -*- encoding : utf-8 -*-
require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe EvaluationsController, type: :controller do

  let(:user) { FactoryGirl.create(:user) }

  before(:each) do
    sign_in user
  end

  describe 'POST process_evaluation_rating' do
    let (:evaluation) { FactoryGirl.create(:full_evaluation, user_id: user.id) }
    it 'increases rating_count by one when evaluation is marked as not helpful' do
      evaluation_rating_count = evaluation.evaluation_rating_count
      evaluation_helpful_rating_count = evaluation.evaluation_helpful_rating_count
      post :process_evaluation_rating, id: evaluation.id, helpful: 'false'
      evaluation.reload
      expect(evaluation.evaluation_rating_count).to eq(evaluation_rating_count+1)
      expect(evaluation.evaluation_helpful_rating_count).to eq(evaluation_helpful_rating_count)
    end

    it 'increases rating_count and helpful_rating_count by one when evaluation is marked as helpful' do
      evaluation_rating_count = evaluation.evaluation_rating_count
      evaluation_helpful_rating_count = evaluation.evaluation_helpful_rating_count
      post :process_evaluation_rating, id: evaluation.id, helpful: 'true'
      evaluation.reload
      expect(evaluation.evaluation_rating_count).to eq(evaluation_rating_count+1)
      expect(evaluation.evaluation_helpful_rating_count).to eq(evaluation_helpful_rating_count+1)
    end
  end


end
