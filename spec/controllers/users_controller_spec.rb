# -*- encoding : utf-8 -*-
require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe UsersController, type: :controller do
  let!(:user) { FactoryGirl.create(:user) }
  let(:another_user) { FactoryGirl.create :user }

  let!(:course_enrollments_visibility_settings) do
    setting = FactoryGirl.create :user_setting, name: :course_enrollments_visibility, user: user
    FactoryGirl.create :user_setting_entry, key: :groups, value: [], setting: setting
    FactoryGirl.create :user_setting_entry, key: :users, value: [], setting: setting
  end

  let!(:open_hpi) { FactoryGirl.create(:mooc_provider, name: 'openHPI', api_support_state: :naive) }
  let!(:open_sap) { FactoryGirl.create(:mooc_provider, name: 'openSAP', api_support_state: :naive) }
  let!(:coursera) { FactoryGirl.create(:mooc_provider, name: 'coursera', api_support_state: :oauth) }
  let!(:other_mooc_provider) { FactoryGirl.create(:mooc_provider) }

  before(:each) do
    sign_in user
  end

  describe 'GET show' do
    it 'assigns the requested user as @user' do
      get :show, id: user.to_param
      expect(assigns(:user)).to eq(user)
    end

    context 'without authorization' do
      before(:each) { get :show, id: another_user.id }
      it 'redirects to root path' do
        expect(response).to redirect_to(root_path)
      end

      it 'shows an alert message' do
        expect(flash[:alert]).to eq I18n.t('unauthorized.show.user')
      end
    end
  end

  describe 'GET edit' do
    it 'assigns the requested user as @user' do
      get :edit, id: user.to_param
      expect(assigns(:user)).to eq(user)
    end

    context 'without authorization' do
      before(:each) { get :edit, id: another_user.id }
      it 'redirects to root path' do
        expect(response).to redirect_to(root_path)
      end

      it 'shows an alert message' do
        expect(flash[:alert]).to eq I18n.t('unauthorized.edit.user')
      end
    end
  end

  describe 'PUT update' do
    describe 'with valid params' do
      self.use_transactional_fixtures = false

      before(:all) do
        DatabaseCleaner.strategy = :truncation
      end

      after(:all) do
        DatabaseCleaner.strategy = :transaction
      end

      let(:new_attributes) { {first_name: 'Maxim', last_name: 'Mustergender', primary_email: 'maxim.mustergender@example.com'} }

      it 'updates the requested user' do
        put :update, id: user.to_param, user: new_attributes
        user.reload
        expect(user.first_name).to eq('Maxim')
        expect(user.last_name).to eq('Mustergender')
        expect(user.primary_email).to eq('maxim.mustergender@example.com')
        expect(flash[:notice]).to eq I18n.t('flash.notice.users.successfully_updated')
      end

      it 'assigns the requested user as @user' do
        put :update, id: user.to_param, user: FactoryGirl.attributes_for(:user)
        expect(assigns(:user)).to eq(user)
      end

      it 'redirects to the user' do
        put :update, id: user.to_param, user: FactoryGirl.attributes_for(:user)
        expect(response).to redirect_to(user)
      end
    end

    context 'without authorization' do
      before(:each) { put :update, id: another_user.id, name: 'Another' }
      it 'redirects to root path' do
        expect(response).to redirect_to(root_path)
      end

      it 'shows an alert message' do
        expect(flash[:alert]).to eq I18n.t('unauthorized.update.user')
      end
    end
  end

  describe 'DELETE destroy' do
    it 'destroys the requested user' do
      expect { delete :destroy, id: user.to_param }.to change { User.count }.by(-1)
    end

    it 'deletes group memberships when deleting a user' do
      created_group = FactoryGirl.create(:group, users: [user])
      group = Group.find(created_group.id)
      delete :destroy, id: user.to_param
      expect(group.users).not_to include(user)
    end

    it 'redirects to the users list and shows a flash message' do
      delete :destroy, id: user.to_param
      expect(response).to redirect_to(users_url)
      expect(flash[:notice]).to eq I18n.t('flash.notice.users.successfully_destroyed')
    end

    context 'without authorization' do
      before(:each) { delete :destroy, id: another_user.id }
      it 'redirects to root path' do
        expect(response).to redirect_to(root_path)
      end

      it 'shows an alert message' do
        expect(flash[:alert]).to eq I18n.t('unauthorized.destroy.user')
      end
    end
  end

  describe 'GET synchronize_courses' do
    render_views
    let(:json) { JSON.parse(response.body) }

    let!(:open_hpi_connection) { FactoryGirl.create(:naive_mooc_provider_user, user: user, mooc_provider: open_hpi) }
    let!(:open_sap_connection) { FactoryGirl.create(:naive_mooc_provider_user, user: user, mooc_provider: open_sap) }
    let!(:coursera_connection) { FactoryGirl.create(:oauth_mooc_provider_user, user: user, mooc_provider: coursera) }

    it 'synchronizes all available user data and redirects to the dashboard_path' do
      expect_any_instance_of(OpenHPIUserWorker).to receive(:perform).with([user.id])
      expect_any_instance_of(OpenSAPUserWorker).to receive(:perform).with([user.id])
      expect_any_instance_of(CourseraUserWorker).to receive(:perform).with([user.id])
      get :synchronize_courses, id: user.to_param
      expect(response).to redirect_to(dashboard_path)
    end

    it 'synchronizes all available user data and renders a partial as JSON' do
      expect_any_instance_of(OpenHPIUserWorker).to receive(:perform).with([user.id]).and_return(true)
      expect_any_instance_of(OpenSAPUserWorker).to receive(:perform).with([user.id]).and_return(true)
      expect_any_instance_of(CourseraUserWorker).to receive(:perform).with([user.id]).and_return(true)
      get :synchronize_courses, format: :json, id: user.to_param
      expect(assigns(:synchronization_state)[:open_hpi]).to eql true
      expect(assigns(:synchronization_state)[:open_sap]).to eql true
      expect(assigns(:synchronization_state)[:coursera]).to eql true
      expected_json = JSON.parse '{"partial":"No courses available","synchronization_state":{"open_hpi":true,"open_sap":true,"coursera":true}}'
      expect(json).to eql expected_json
    end
  end

  describe 'GET settings' do
    it 'prepares settings page' do
      allow_any_instance_of(ActionController::RequestForgeryProtection).to receive(:masked_authenticity_token).and_return('my_csrf_token')
      get :settings, id: user
      assigns(:mooc_providers).each_with_index do |mooc_provider, index|
        expect(mooc_provider[:id]).to eql MoocProvider.all[index].id
        expect(mooc_provider[:logo_id]).to eql MoocProvider.all[index].logo_id
        expect(mooc_provider[:api_support_state]).to eql MoocProvider.all[index].api_support_state
        if MoocProvider.all[index].name == 'coursera'
          oauth_link = CourseraConnector.new.oauth_link("#{user_settings_path(user)}?subsite=mooc_provider", 'my_csrf_token')
          expect(mooc_provider[:oauth_link]).to eql oauth_link
        end
      end
      expect(assigns(:mooc_provider_connections)).to eql user.mooc_providers.pluck(:mooc_provider_id)
    end
  end

  describe 'GET oauth_callback' do
    it 'handles a positive response' do
      allow_any_instance_of(ActionController::RequestForgeryProtection).to receive(:valid_authenticity_token?).and_return(true)
      expect_any_instance_of(CourseraConnector).to receive(:initialize_connection).with(user, code: 'abc123').and_return(true)
      get :oauth_callback, code: 'abc123', state: 'coursera~/dashboard~my_csrf_token'
      expect(response).to redirect_to(dashboard_path)
    end

    it 'handles a negative response' do
      allow_any_instance_of(ActionController::RequestForgeryProtection).to receive(:valid_authenticity_token?).and_return(true)
      expect_any_instance_of(CourseraConnector).to receive(:destroy_connection).with(user).and_return(true)
      get :oauth_callback, error: 'access_denied', state: 'coursera~/dashboard~my_csrf_token'
      expect(response).to redirect_to(dashboard_path)
      expect(flash[:error]).to include(I18n.t('users.synchronization.oauth_error'))
    end

    it 'handles unknown mooc provider' do
      expect_any_instance_of(ConnectorMapper).not_to receive(:get_connector_by_mooc_provider)
      get :oauth_callback, code: 'abc123', state: 'unknown~/dashboard~my_csrf_token'
      expect(response).to redirect_to(dashboard_path)
      expect(flash[:error]).to include(I18n.t('users.synchronization.oauth_error'))
    end

    it 'handles mooc provider which does not support oauth' do
      expect_any_instance_of(ConnectorMapper).to receive(:get_connector_by_mooc_provider)
      get :oauth_callback, code: 'abc123', state: 'openHPI~/dashboard~my_csrf_token'
      expect(response).to redirect_to(dashboard_path)
      expect(flash[:error]).to include(I18n.t('users.synchronization.oauth_error'))
    end

    it 'handles invalid csrf token' do
      allow_any_instance_of(ActionController::RequestForgeryProtection).to receive(:valid_authenticity_token?).and_return(false)
      expect_any_instance_of(ConnectorMapper).to receive(:get_connector_by_mooc_provider).and_return(CourseraConnector.new)
      get :oauth_callback, code: 'abc123', state: 'coursera~/dashboard~my_invalid_csrf_token'
      expect(response).to redirect_to(dashboard_path)
      expect(flash[:error]).to include(I18n.t('users.synchronization.oauth_error'))
    end
  end

  describe 'GET set_mooc_provider_connection' do
    render_views
    let(:json) { JSON.parse(response.body) }
    let(:email_address) { 'user@example.com' }
    let(:password) { 'p@ssw0rd' }

    it 'handles unknown mooc provider and redirects to the dashboard path' do
      expect_any_instance_of(AbstractMoocProviderConnector).not_to receive(:initialize_connection)
      expect_any_instance_of(AbstractMoocProviderConnector).not_to receive(:load_user_data).with([user.id])
      get :set_mooc_provider_connection, id: user.to_param, email: email_address, password: password, mooc_provider: 'unknown'
      expect(assigns(:got_connection)).to eql false
      expect(response).to redirect_to(dashboard_path)
    end

    it 'handles unknown mooc provider and renders a partial as JSON' do
      expect_any_instance_of(AbstractMoocProviderConnector).not_to receive(:initialize_connection)
      expect_any_instance_of(AbstractMoocProviderConnector).not_to receive(:load_user_data).with([user.id])
      get :set_mooc_provider_connection, format: :json, id: user.to_param, email: email_address, password: password, mooc_provider: 'unknown'
      expect(assigns(:got_connection)).to eql false
      expect(json).to include 'partial'
      expect(json['status']).to eql false
    end

    it 'handles unknown mooc provider connector and redirects to the dashboard path' do
      expect_any_instance_of(AbstractMoocProviderConnector).not_to receive(:initialize_connection)
      expect_any_instance_of(AbstractMoocProviderConnector).not_to receive(:load_user_data).with([user.id])
      get :set_mooc_provider_connection, id: user.to_param, email: email_address, password: password, mooc_provider: other_mooc_provider.to_param
      expect(assigns(:got_connection)).to eql false
      expect(response).to redirect_to(dashboard_path)
    end

    it 'handles unknown mooc provider connector and renders a partial as JSON' do
      expect_any_instance_of(AbstractMoocProviderConnector).not_to receive(:initialize_connection)
      expect_any_instance_of(AbstractMoocProviderConnector).not_to receive(:load_user_data).with([user.id])
      get :set_mooc_provider_connection, format: :json, id: user.to_param, email: email_address, password: password, mooc_provider: other_mooc_provider.to_param
      expect(assigns(:got_connection)).to eql false
      expect(json).to include 'partial'
      expect(json['status']).to eql false
    end

    context 'openHPI' do
      it 'initializes a new connection to a naive mooc provider and redirects to the dashboard path' do
        expect_any_instance_of(OpenHPIConnector).to receive(:initialize_connection).with(user, email: email_address, password: password).and_return(true)
        get :set_mooc_provider_connection, id: user.to_param, email: email_address, password: password, mooc_provider: open_hpi.to_param
        expect(assigns(:got_connection)).to eql true
        expect(response).to redirect_to(dashboard_path)
      end

      it 'initializes a new connection to a naive mooc provider and renders a partial as JSON' do
        expect_any_instance_of(OpenHPIConnector).to receive(:initialize_connection).with(user, email: email_address, password: password).and_return(true)
        get :set_mooc_provider_connection, format: :json, id: user.to_param, email: email_address, password: password, mooc_provider: open_hpi.to_param
        expect(assigns(:got_connection)).to eql true
        expect(json).to include 'partial'
        expect(json['status']).to eql true
      end

      it 'does not initialize a new connection to a naive mooc provider and redirects to the dashboard path' do
        expect_any_instance_of(OpenHPIConnector).to receive(:initialize_connection).with(user, email: email_address, password: password).and_return(false)
        get :set_mooc_provider_connection, id: user.to_param, email: email_address, password: password, mooc_provider: open_hpi.to_param
        expect(assigns(:got_connection)).to eql false
        expect(response).to redirect_to(dashboard_path)
      end

      it 'does not initialize a new connection to a naive mooc provider and renders a partial as JSON' do
        expect_any_instance_of(OpenHPIConnector).to receive(:initialize_connection).with(user, email: email_address, password: password).and_return(false)
        get :set_mooc_provider_connection, format: :json, id: user.to_param, email: email_address, password: password, mooc_provider: open_hpi.to_param
        expect(assigns(:got_connection)).to eql false
        expect(json).to include 'partial'
        expect(json['status']).to eql false
      end
    end

    context 'openSAP' do
      it 'initializes a new connection to a naive mooc provider and redirects to the dashboard path' do
        expect_any_instance_of(OpenSAPConnector).to receive(:initialize_connection).with(user, email: email_address, password: password).and_return(true)
        get :set_mooc_provider_connection, id: user.to_param, email: email_address, password: password, mooc_provider: open_sap.to_param
        expect(assigns(:got_connection)).to eql true
        expect(response).to redirect_to(dashboard_path)
      end

      it 'initializes a new connection to a naive mooc provider and renders a partial as JSON' do
        expect_any_instance_of(OpenSAPConnector).to receive(:initialize_connection).with(user, email: email_address, password: password).and_return(true)
        get :set_mooc_provider_connection, format: :json, id: user.to_param, email: email_address, password: password, mooc_provider: open_sap.to_param
        expect(assigns(:got_connection)).to eql true
        expect(json).to include 'partial'
        expect(json['status']).to eql true
      end

      it 'does not initialize a new connection to a naive mooc provider and redirects to the dashboard path' do
        expect_any_instance_of(OpenSAPConnector).to receive(:initialize_connection).with(user, email: email_address, password: password).and_return(false)
        get :set_mooc_provider_connection, id: user.to_param, email: email_address, password: password, mooc_provider: open_sap.to_param
        expect(assigns(:got_connection)).to eql false
        expect(response).to redirect_to(dashboard_path)
      end

      it 'does not initialize a new connection to a naive mooc provider and renders a partial as JSON' do
        expect_any_instance_of(OpenSAPConnector).to receive(:initialize_connection).with(user, email: email_address, password: password).and_return(false)
        get :set_mooc_provider_connection, format: :json, id: user.to_param, email: email_address, password: password, mooc_provider: open_sap.to_param
        expect(assigns(:got_connection)).to eql false
        expect(json).to include 'partial'
        expect(json['status']).to eql false
      end
    end
  end

  describe 'GET revoke_mooc_provider_connection' do
    render_views
    let(:json) { JSON.parse(response.body) }

    it 'handles unknown mooc provider and redirects to the dashboard path' do
      expect_any_instance_of(AbstractMoocProviderConnector).not_to receive(:destroy_connection).with(user.id)
      get :revoke_mooc_provider_connection, id: user.to_param, mooc_provider: 'unknown'
      expect(assigns(:revoked_connection)).to eql true
      expect(response).to redirect_to(dashboard_path)
    end

    it 'handles unknown mooc provider and renders a partial as JSON' do
      expect_any_instance_of(AbstractMoocProviderConnector).not_to receive(:destroy_connection)
      get :revoke_mooc_provider_connection, format: :json, id: user.to_param, mooc_provider: 'unknown'
      expect(assigns(:revoked_connection)).to eql true
      expect(json).to include 'partial'
      expect(json['status']).to eql true
    end

    it 'handles unknown mooc provider connector and redirects to the dashboard path' do
      expect_any_instance_of(AbstractMoocProviderConnector).not_to receive(:destroy_connection)
      get :revoke_mooc_provider_connection, id: user.to_param, mooc_provider: other_mooc_provider.to_param
      expect(assigns(:revoked_connection)).to eql true
      expect(response).to redirect_to(dashboard_path)
    end

    it 'handles unknown mooc provider connector and renders a partial as JSON' do
      expect_any_instance_of(AbstractMoocProviderConnector).not_to receive(:destroy_connection)
      get :revoke_mooc_provider_connection, format: :json, id: user.to_param, mooc_provider: other_mooc_provider.to_param
      expect(assigns(:revoked_connection)).to eql true
      expect(json).to include 'partial'
      expect(json['status']).to eql true
    end

    context 'openHPI' do
      it 'destroys a connection to a naive mooc provider and redirects to the dashboard path' do
        expect_any_instance_of(OpenHPIConnector).to receive(:destroy_connection).with(user).and_return(true)
        get :revoke_mooc_provider_connection, id: user.to_param, mooc_provider: open_hpi.to_param
        expect(assigns(:revoked_connection)).to eql true
        expect(response).to redirect_to(dashboard_path)
      end

      it 'destroys a connection to a naive mooc provider and renders a partial as JSON' do
        expect_any_instance_of(OpenHPIConnector).to receive(:destroy_connection).with(user).and_return(true)
        get :revoke_mooc_provider_connection, format: :json, id: user.to_param, mooc_provider: open_hpi.to_param
        expect(assigns(:revoked_connection)).to eql true
        expect(json).to include 'partial'
        expect(json['status']).to eql true
      end

      it 'does not try to destroy a connection which is not present (any more) to a naive mooc provider and redirects to the dashboard path' do
        expect_any_instance_of(OpenHPIConnector).to receive(:destroy_connection).with(user).and_return(false)
        get :revoke_mooc_provider_connection, id: user.to_param, mooc_provider: open_hpi.to_param
        expect(assigns(:revoked_connection)).to eql false
        expect(response).to redirect_to(dashboard_path)
      end

      it 'does not try to destroy a connection which is not present (any more) to a naive mooc provider and renders a partial as JSON' do
        expect_any_instance_of(OpenHPIConnector).to receive(:destroy_connection).with(user).and_return(false)
        get :revoke_mooc_provider_connection, format: :json, id: user.to_param, mooc_provider: open_hpi.to_param
        expect(assigns(:revoked_connection)).to eql false
        expect(json).to include 'partial'
        expect(json['status']).to eql false
      end

      it 'does not try to destroy a connection twice' do
        FactoryGirl.create(:naive_mooc_provider_user, user: user, mooc_provider: open_hpi)
        get :revoke_mooc_provider_connection, format: :json, id: user.to_param, mooc_provider: open_hpi.to_param
        expect(assigns(:revoked_connection)).to eql true
        expect(json).to include 'partial'
        expect(json['status']).to eql true
        get :revoke_mooc_provider_connection, format: :json, id: user.to_param, mooc_provider: open_hpi.to_param
        expect(assigns(:revoked_connection)).to eql false
        expect(JSON.parse response.body).to include 'partial'
        expect((JSON.parse response.body)['status']).to eql false
      end
    end

    context 'openSAP' do
      it 'initializes a new connection to a naive mooc provider and redirects to the dashboard path' do
        expect_any_instance_of(OpenSAPConnector).to receive(:destroy_connection).with(user).and_return(true)
        get :revoke_mooc_provider_connection, id: user.to_param, mooc_provider: open_sap.to_param
        expect(assigns(:revoked_connection)).to eql true
        expect(response).to redirect_to(dashboard_path)
      end

      it 'initializes a new connection to a naive mooc provider and renders a partial as JSON' do
        expect_any_instance_of(OpenSAPConnector).to receive(:destroy_connection).with(user).and_return(true)
        get :revoke_mooc_provider_connection, format: :json, id: user.to_param, mooc_provider: open_sap.to_param
        expect(assigns(:revoked_connection)).to eql true
        expect(json).to include 'partial'
        expect(json['status']).to eql true
      end

      it 'does not try to destroy a connection which is not present (any more) to a naive mooc provider and redirects to the dashboard path' do
        expect_any_instance_of(OpenSAPConnector).to receive(:destroy_connection).with(user).and_return(false)
        get :revoke_mooc_provider_connection, id: user.to_param, mooc_provider: open_sap.to_param
        expect(assigns(:revoked_connection)).to eql false
        expect(response).to redirect_to(dashboard_path)
      end

      it 'does not try to destroy a connection which is not present (any more) to a naive mooc provider and renders a partial as JSON' do
        expect_any_instance_of(OpenSAPConnector).to receive(:destroy_connection).with(user).and_return(false)
        get :revoke_mooc_provider_connection, format: :json, id: user.to_param, mooc_provider: open_sap.to_param
        expect(assigns(:revoked_connection)).to eql false
        expect(json).to include 'partial'
        expect(json['status']).to eql false
      end

      it 'does not try to destroy a connection twice' do
        FactoryGirl.create(:naive_mooc_provider_user, user: user, mooc_provider: open_sap)
        get :revoke_mooc_provider_connection, format: :json, id: user.to_param, mooc_provider: open_sap.to_param
        expect(assigns(:revoked_connection)).to eql true
        expect(json).to include 'partial'
        expect(json['status']).to eql true
        get :revoke_mooc_provider_connection, format: :json, id: user.to_param, mooc_provider: open_sap.to_param
        expect(assigns(:revoked_connection)).to eql false
        expect(JSON.parse response.body).to include 'partial'
        expect((JSON.parse response.body)['status']).to eql false
      end
    end
  end

  describe 'GET account_settings' do
    it 'does not prepare mooc_provider_settings' do
      expect_any_instance_of(described_class).not_to receive(:prepare_mooc_provider_settings)
      get :account_settings, id: user.to_param
    end

    context 'views' do
      render_views
      let(:json) { JSON.parse(response.body) }

      it 'redirects to the dashboard' do
        get :account_settings, id: user.to_param
        expect(response).to redirect_to dashboard_path
      end

      it 'renders a JSON with the partial' do
        get :account_settings, id: user.to_param, format: :json
        expect(json).to include 'partial'
      end
    end
  end

  describe 'GET mooc_provider_settings' do
    it 'prepares mooc_provider_settings' do
      expect_any_instance_of(described_class).to receive(:prepare_mooc_provider_settings)
      get :mooc_provider_settings, id: user.to_param
    end

    context 'views' do
      render_views
      let(:json) { JSON.parse(response.body) }

      it 'redirects to the dashboard' do
        get :mooc_provider_settings, id: user.to_param
        expect(response).to redirect_to dashboard_path
      end

      it 'renders a JSON with the partial' do
        get :mooc_provider_settings, id: user.to_param, format: :json
        expect(json).to include 'partial'
      end
    end
  end
end
