require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe CoursesController, :type => :controller do


  let(:user) { FactoryGirl.create(:user) }
  let(:mooc_provider) { FactoryGirl.create(:mooc_provider, name: 'open_mammooc') }
  let!(:course) { FactoryGirl.create(:course, mooc_provider: mooc_provider) }
  let(:second_mooc_provider) { FactoryGirl.create(:mooc_provider, name: 'openHPI') }
  let(:second_course) { FactoryGirl.create(:course, mooc_provider: second_mooc_provider) }

  before(:each) do
    sign_in user
  end

  describe "GET index" do
    it "assigns all courses as @courses" do
      get :index, {}
      expect(assigns(:courses)).to eq([course])
    end
  end

  describe "GET show" do
    it "assigns the requested course as @course" do
      get :show, {id: course.to_param}
      expect(assigns(:course)).to eq(course)
    end
  end

  describe "GET enroll_course" do
    it "assigns false as @has_enrolled if no provider connector is present" do
      get :enroll_course, {id: course.to_param}
      expect(assigns(:has_enrolled)).to eq false
    end

    it "assigns nil as @has_enrolled if a connector is present but user has no connection" do
      get :enroll_course, {id: second_course.to_param}
      expect(assigns(:has_enrolled)).to eq nil
    end

    it "assigns true as @has_enrolled if everything was ok" do
      allow_any_instance_of(OpenHPIConnector).to receive(:enroll_user_for_course).and_return(true)
      get :enroll_course, {id: second_course.to_param}
      expect(assigns(:has_enrolled)).to eq true
    end
  end

  describe "GET unenroll_course" do
    it "assigns false as @has_unenrolled if no provider connector is present" do
      get :unenroll_course, {id: course.to_param}
      expect(assigns(:has_unenrolled)).to eq false
    end

    it "assigns nil as @has_unenrolled if a connector is present but user has no connection" do
      get :unenroll_course, {id: second_course.to_param}
      expect(assigns(:has_unenrolled)).to eq nil
    end

    it "assigns true as @has_unenrolled if everything was ok" do
      allow_any_instance_of(OpenHPIConnector).to receive(:unenroll_user_for_course).and_return(true)
      get :unenroll_course, {id: second_course.to_param}
      expect(assigns(:has_unenrolled)).to eq true
    end
  end

end
